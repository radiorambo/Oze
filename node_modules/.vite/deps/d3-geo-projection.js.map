{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/math.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/airy.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/aitoff.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/armadillo.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/august.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/baker.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/berghaus.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/hammer.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/newton.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/bertin.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/mollweide.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/boggs.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/parallel1.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/sinusoidal.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/bonne.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/bottomley.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/bromley.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/chamberlin.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/collignon.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/craig.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/craster.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/cylindricalEqualArea.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/cylindricalStereographic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/eckert1.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/eckert2.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/eckert3.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/eckert4.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/eckert5.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/eckert6.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/eisenlohr.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/fahey.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/foucaut.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/foucautSinusoidal.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/gilbert.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/gingery.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/ginzburgPolyconic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/ginzburg4.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/ginzburg5.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/ginzburg6.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/ginzburg8.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/ginzburg9.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/square.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/gringorten.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/elliptic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/guyou.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/hammerRetroazimuthal.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/healpix.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/hill.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/sinuMollweide.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/homolosine.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/hufnagel.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/integrate.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/hyperelliptical.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/index.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/boggs.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/homolosine.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/mollweide.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/sinusoidal.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/kavrayskiy7.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/lagrange.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/larrivee.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/laskowski.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/littrow.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/loximuthal.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/miller.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/modifiedStereographic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/naturalEarth2.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/nellHammer.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/nicolosi.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/patterson.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/polyconic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/polyhedral/matrix.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/polyhedral/index.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/polyhedral/octahedron.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/polyhedral/butterfly.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/polyhedral/collignon.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/polyhedral/waterman.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/noop.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/project/clockwise.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/project/contains.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/project/index.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/quincuncial/index.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/quincuncial/gringorten.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/quincuncial/peirce.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/quantize.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/rectangularPolyconic.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/robinson.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/satellite.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/stitch.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/times.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/twoPoint.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/twoPointAzimuthal.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/twoPointEquidistant.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/vanDerGrinten.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/vanDerGrinten2.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/vanDerGrinten3.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/vanDerGrinten4.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/wagner.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/wagner4.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/wagner6.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/wiechel.js", "../../../../../node_modules/.pnpm/d3-geo-projection@4.0.0/node_modules/d3-geo-projection/src/winkel3.js"],
  "sourcesContent": ["export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math.js\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = sinz_2 / cosz_2,\n          lnsecz_2 = -log(abs(cosz_2));\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2)) * (cosz_2 < 0 ? 0.7 : 1);\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math.js\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math.js\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream)),\n        precision = p.precision();\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90)\n        sphereStream.point(lambda, sPhi0 * 90);\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math.js\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math.js\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n", "import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math.js\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n", "import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math.js\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n", "import {abs, epsilon, epsilon2} from \"./math.js\";\n\n// Approximate Newton-Raphson\n// Solve f(x) = y, start from x\nexport function solve(f, y, x) {\n  var steps = 100, delta, f0, f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = (-1 * epsilon * (f0 - y)) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n  return steps < 0 ? NaN : x;\n}\n\n// Approximate Newton-Raphson in 2D\n// Solve f(a,b) = [x,y]\nexport function solve2d(f, MAX_ITERATIONS, eps) {\n  if (MAX_ITERATIONS === undefined) MAX_ITERATIONS = 40;\n  if (eps === undefined) eps = epsilon2;\n  return function(x, y, a, b) {\n    var err2, da, db;\n    a = a === undefined ? 0 : +a;\n    b = b === undefined ? 0 : +b;\n    for (var i = 0; i < MAX_ITERATIONS; i++) {\n      var p = f(a, b),\n        // diffs\n        tx = p[0] - x,\n        ty = p[1] - y;\n      if (abs(tx) < eps && abs(ty) < eps) break; // we're there!\n\n      // backtrack if we overshot\n      var h = tx * tx + ty * ty;\n      if (h > err2) {\n        a -= da /= 2;\n        b -= db /= 2;\n        continue;\n      }\n      err2 = h;\n\n      // partial derivatives\n      var ea = (a > 0 ? -1 : 1) * eps,\n        eb = (b > 0 ? -1 : 1) * eps,\n        pa = f(a + ea, b),\n        pb = f(a, b + eb),\n        dxa = (pa[0] - p[0]) / ea,\n        dya = (pa[1] - p[1]) / ea,\n        dxb = (pb[0] - p[0]) / eb,\n        dyb = (pb[1] - p[1]) / eb,\n        // determinant\n        D = dyb * dxa - dya * dxb,\n        // newton step — or half-step for small D\n        l = (abs(D) < 0.5 ? 0.5 : 1) / D;\n      da = (ty * dxb - tx * dyb) * l;\n      db = (tx * dya - ty * dxa) * l;\n      a += da;\n      b += db;\n      if (abs(da) < eps && abs(db) < eps) break; // we're crawling\n    }\n    return [a, b];\n  };\n}", "import {geoProjection as projection} from \"d3-geo\";\nimport {hammerRaw} from \"./hammer.js\";\nimport {cos, pi, sin} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Bertin 1953 as a modified Briesemeister\n// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642\nexport function bertin1953Raw() {\n  var hammer = hammerRaw(1.68, 2),\n      fu = 1.4, k = 12;\n\n  function forward(lambda, phi) {\n\n    if (lambda + phi < -fu) {\n      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;\n      lambda += u;\n      phi -= 0.8 * u * sin(phi + pi / 2);\n    }\n\n    var r = hammer(lambda, phi);\n\n    var d = (1 - cos(lambda * phi)) / k;\n\n    if (r[1] < 0) {\n      r[0] *= 1 + d;\n    }\n    if (r[1] > 0) {\n      r[1] *= 1 + d / 1.5 * r[0] * r[0];\n    }\n\n    return r;\n  }\n  \n  forward.invert = solve2d(forward);\n  return forward;\n}\n\nexport default function() {\n  // this projection should not be rotated\n  return projection(bertin1953Raw())\n    .rotate([-16.5, -42])\n    .scale(176.57)\n    .center([7.93, 0.09]);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math.js\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide.js\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math.js\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math.js\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math.js\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n", "import parallel1 from \"./parallel1.js\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math.js\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n", "import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math.js\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n", "import {asin, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math.js\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n", "import {asin, cos, sin} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n", "import {atan, cos, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math.js\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math.js\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math.js\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august.js\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math.js\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math.js\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {cos, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\nexport function foucautSinusoidalRaw(alpha) {\n  var beta = 1 - alpha,\n      equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0],\n      polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1],\n      ratio = sqrt(2 * polar / equatorial);\n\n  function raw(lambda, phi) {\n    var cosphi = cos(phi),\n        sinphi = sin(phi);\n    return [\n      cosphi / (beta + alpha * cosphi) * lambda,\n      beta * phi + alpha * sinphi\n    ];\n  }\n\n  function forward(lambda, phi) {\n    var p = raw(lambda, phi);\n    return [p[0] * ratio, p[1] / ratio];\n  }\n\n  function forwardMeridian(phi) {\n    return forward(0, phi)[1];\n  }\n\n  forward.invert = function(x, y) {\n    var phi = solve(forwardMeridian, y),\n        lambda = x / ratio * (alpha + beta / cos(phi));\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0.5,\n      m = projectionMutator(foucautSinusoidalRaw),\n      p = m(alpha);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_) : alpha;\n  };\n\n  return p\n      .scale(168.725);\n}\n", "import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math.js\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function() {\n      return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"angle\");\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"fitExtent\");\n  property(\"fitHeight\");\n  property(\"fitSize\");\n  property(\"fitWidth\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n", "import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math.js\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n", "import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nimport {pi} from \"./math.js\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n", "import {halfPi, pi} from \"./math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n", "import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math.js\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic.js\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n", "import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math.js\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n", "import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\nimport {abs, asin, degrees, epsilon, floor, max, min, pi, radians, sqrtPi, tau} from \"./math.js\";\n\nvar K = 3,\n    healpixParallel = asin(1 - 1 / K) * degrees,\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(\n    range(-180, 180 + step / 2, step).map(sphereTop),\n    range(180, -180 - step / 2, -step).map(sphereBottom)\n  );\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math.js\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide.js\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n", "import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\n\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(\n      (4 * pi) /\n        (2 * psiMax +\n          (1 + a - b / 2) * sin(2 * psiMax) +\n          ((a + b) / 2) * sin(4 * psiMax) +\n          (b / 2) * sin(6 * psiMax))\n    ),\n    c = sqrt(\n      ratio *\n        sin(psiMax) *\n        sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))\n    ),\n    M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (\n      (2 * psi +\n        (1 + a - b / 2) * sin(2 * psi) +\n        ((a + b) / 2) * sin(4 * psi) +\n        (b / 2) * sin(6 * psi)) /\n      psiMax\n    );\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function(lambda, phi) {\n    var psi = psiMax * solve(mapping, (M * sin(phi)) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [((kr * c * lambda) / pi) * cos(psi), (kr / c) * sin(psi)];\n  };\n\n  forward.invert = function(x, y) {\n    var psi = solve(inversemapping, (y * c) / k);\n    return [\n      (x * pi) / (cos(psi) * k * c * radius(psi)),\n      asin((psiMax * mapping(psi / psiMax)) / M)\n    ];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n    forward = function(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n    forward.invert = function(x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\n\nexport default function() {\n  var a = 1,\n    b = 0,\n    psiMax = 45 * radians,\n    ratio = 2,\n    mutate = projectionMutator(hufnagelRaw),\n    projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function(_) {\n    return arguments.length ? mutate((a = +_), b, psiMax, ratio) : a;\n  };\n  projection.b = function(_) {\n    return arguments.length ? mutate(a, (b = +_), psiMax, ratio) : b;\n  };\n  projection.psiMax = function(_) {\n    return arguments.length\n      ? mutate(a, b, (psiMax = +_ * radians), ratio)\n      : psiMax * degrees;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(a, b, psiMax, (ratio = +_)) : ratio;\n  };\n\n  return projection.scale(180.739);\n}\n", "// https://github.com/scijs/integrate-adaptive-simpson\n\n// This algorithm adapted from pseudocode in:\n// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\nfunction adsimp (f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n  if (state.nanEncountered) {\n    return NaN;\n  }\n\n  var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n\n  h = b - a;\n  f1 = f(a + h * 0.25);\n  f2 = f(b - h * 0.25);\n\n  // Simple check for NaN:\n  if (isNaN(f1)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  // Simple check for NaN:\n  if (isNaN(f2)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  sl = h * (fa + 4 * f1 + fm) / 12;\n  sr = h * (fm + 4 * f2 + fb) / 12;\n  s2 = sl + sr;\n  err = (s2 - V0) / 15;\n\n  if (depth > maxdepth) {\n    state.maxDepthCount++;\n    return s2 + err;\n  } else if (Math.abs(err) < tol) {\n    return s2 + err;\n  } else {\n    m = a + h * 0.5;\n\n    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V1)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V2)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    return V1 + V2;\n  }\n}\n\nexport function integrate (f, a, b, tol, maxdepth) {\n  var state = {\n    maxDepthCount: 0,\n    nanEncountered: false\n  };\n\n  if (tol === undefined) {\n    tol = 1e-8;\n  }\n  if (maxdepth === undefined) {\n    maxdepth = 20;\n  }\n\n  var fa = f(a);\n  var fm = f(0.5 * (a + b));\n  var fb = f(b);\n\n  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n/*\n  if (state.maxDepthCount > 0 && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n  }\n\n  if (state.nanEncountered && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');\n  }\n*/\n\n  return result;\n}", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, pi, pow, sign, sin} from \"./math.js\";\nimport {integrate} from \"./integrate.js\";\n\nexport function hyperellipticalRaw(alpha, k, gamma) {\n\n  function elliptic (f) {\n    return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);\n  }\n\n  function z(f) {\n    return integrate(elliptic, 0, f, 1e-4);\n  }\n\n  var G = 1 / z(1),\n      n = 1000,\n      m = (1 + 1e-8) * G,\n      approx = [];\n  for (var i = 0; i <= n; i++)\n      approx.push(z(i / n) * m);\n\n  function Y(sinphi) {\n    var rmin = 0, rmax = n, r = n >> 1;\n    do {\n      if (approx[r] > sinphi) rmax = r; else rmin = r;\n      r = (rmin + rmax) >> 1;\n    } while (r > rmin);\n    var u = approx[r + 1] - approx[r];\n    if (u) u = (sinphi - approx[r + 1]) / u;\n    return (r + 1 + u) / n;\n  }\n\n  var ratio = 2 * Y(1) / pi * G / gamma;\n\n  var forward = function(lambda, phi) {\n    var y = Y(abs(sin(phi))),\n        x = elliptic(y) * lambda;\n    y /= ratio;\n    return [ x, (phi >= 0) ? y : -y ];\n  };\n\n  forward.invert = function(x, y) {\n    var phi;\n    y *= ratio;\n    if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);\n    return [ x / elliptic(abs(y)), phi ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0,\n      k = 2.5,\n      gamma = 1.183136, // affine = sqrt(2 * gamma / pi) = 0.8679\n      m = projectionMutator(hyperellipticalRaw),\n      p = m(alpha, k, gamma);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_, k, gamma) : alpha;\n  };\n\n  p.k = function(_) {\n    return arguments.length ? m(alpha, k = +_, gamma) : k;\n  };\n\n  p.gamma = function(_) {\n    return arguments.length ? m(alpha, k, gamma = +_) : gamma;\n  };\n\n  return p\n      .scale(152.63);\n}\n", "import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes, inverse) {\n  var sphere, bounds;\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  if (inverse) {\n    forward.invert = inverse(forward);\n  } else if (project.invert) {\n    forward.invert = function(x, y) {\n      var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n      for (var i = 0, n = bound.length; i < n; ++i) {\n        var b = bound[i];\n        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n          var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n          p[0] += lobe[i][1][0];\n          return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n        }\n      }\n    };\n  }\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n  \n  p.lobes = function(_) {\n    if (!arguments.length) return lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * degrees, l[0][1] * degrees],\n          [l[1][0] * degrees, l[1][1] * degrees],\n          [l[2][0] * degrees, l[2][1] * degrees]\n        ];\n      });\n    });\n\n    sphere = interpolateSphere(_);\n\n    lobes = _.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * radians, l[0][1] * radians],\n          [l[1][0] * radians, l[1][1] * radians],\n          [l[2][0] * radians, l[2][1] * radians]\n        ];\n      });\n    });\n\n    bounds = lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        var x0 = project(l[0][0], l[0][1])[0],\n            x1 = project(l[2][0], l[2][1])[0],\n            y0 = project(l[1][0], l[0][1])[1],\n            y1 = project(l[1][0], l[1][1])[1],\n            t;\n        if (y0 > y1) t = y0, y0 = y1, y1 = t;\n        return [[x0, y0], [x1, y1]];\n      });\n    });\n\n    return p;\n  };\n\n  if (lobes != null) p.lobes(lobes);\n\n  return p;\n}\n", "import {boggsRaw} from \"../boggs.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n", "import {homolosineRaw} from \"../homolosine.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n", "import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n", "import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n", "import {sinuMollweideRaw} from \"../sinuMollweide.js\";\nimport interrupt from \"./index.js\";\nimport {solve2d} from \"../newton.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes, solve2d)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n", "import {sinusoidalRaw} from \"../sinusoidal.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math.js\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math.js\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math.js\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math.js\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math.js\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n", "import parallel1 from \"./parallel1.js\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math.js\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math.js\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n", "import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math.js\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1400)\n      .center([-160.908, 62.4864])\n      .clipAngle(30)\n      .angle(7.8);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math.js\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon2} from \"./math.js\";\n\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;\n  return [\n    lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))\n  ];\n}\n\nnaturalEarth2Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta, phi2, phi4, phi6;\n  do {\n    phi2 = phi * phi; phi4 = phi2 * phi2;\n    phi -= delta = ((phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))) - y) /\n      (1.01183 + phi4 * phi4 * ((9 * -0.02625) + (11 * 0.01926) * phi2 + (13 * -0.00396) * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  phi2 = phi * phi; phi4 = phi2 * phi2; phi6 = phi2 * phi4;\n  return [\n    x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth2Raw)\n      .scale(175.295);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math.js\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n", "import {hammerRaw} from \"../hammer.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  0],  [-90,  90], [   0,  0]],\n  [[   0,  0], [  90,  90], [ 180, 0]]\n], [ // southern hemisphere\n  [[-180, 0], [-90, -90], [  0, 0]],\n  [[   0, 0], [ 90, -90], [180, 0]]\n]];\n\nexport default function() {\n  return interrupt(hammerRaw(Infinity), lobes)\n      .rotate([20, 0])\n      .scale(152.63);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, halfPi, pi, sign, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\n// Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n    q = cos(phi),\n    s = sign(lambda);\n\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];\n  else if (phi === 0) return [lambda, 0];\n  else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n\n  var b = pi / (2 * lambda) - (2 * lambda) / pi,\n    c = (2 * phi) / pi,\n    d = (1 - c * c) / (sinPhi - c);\n\n  var b2 = b * b,\n    d2 = d * d,\n    b2d2 = 1 + b2 / d2,\n    d2b2 = 1 + d2 / b2;\n\n  var M = ((b * sinPhi) / d - b / 2) / b2d2,\n    N = ((d2 * sinPhi) / b2 + d / 2) / d2b2,\n    m = M * M + (q * q) / b2d2,\n    n = N * N - ((d2 * sinPhi * sinPhi) / b2 + d * sinPhi - 1) / d2b2;\n\n  return [\n    halfPi * (M + sqrt(m) * s),\n    halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)\n  ];\n}\n\nnicolosiRaw.invert = function(x, y) {\n\n  x /= halfPi;\n  y /= halfPi;\n\n  var x2 = x * x,\n    y2 = y * y,\n    x2y2 = x2 + y2,\n    pi2 = pi * pi;\n\n  return [\n    x ? (x2y2 -1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0,\n    solve(function(phi) {\n      return (\n        x2y2 * (pi * sin(phi) - 2 * phi) * pi +\n        4 * phi * phi * (y - sin(phi)) +\n        2 * pi * phi -\n        pi2 * y\n      );\n    }, 0)\n  ];\n};\n\nexport default function() {\n  return projection(nicolosiRaw)\n    .scale(127.267);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math.js\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(y) * sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n", "import {atan2, cos, sin, sqrt} from \"../math.js\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n", "import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\nimport {default as matrix, multiply, inverse} from \"./matrix.js\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\nexport default function(root, face) {\n\n  recurse(root, {transform: null});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj.angle(-30);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n", "// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n", "import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(101.858)\n      .center([0, 45]);\n}\n", "import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon.js\";\nimport {pi, sqrt} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n", "import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .angle(-30)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n", "export default () => {}\n", "export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n", "export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n", "import {geoStream} from \"d3-geo\";\nimport noop from \"../noop.js\";\nimport clockwise from \"./clockwise.js\";\nimport contains from \"./contains.js\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,\n          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n", "import {gringortenRaw} from \"../gringorten.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n", "import {guyouRaw} from \"../guyou.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n", "export default function(input, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(input) {\n    var n = input.length, i = 2, output = new Array(n);\n    output[0] = +input[0].toFixed(digits);\n    output[1] = +input[1].toFixed(digits);\n    while (i < n) output[i] = input[i], ++i;\n    return output;\n  }\n\n  function quantizePoints(input) {\n    return input.map(quantizePoint);\n  }\n\n  function quantizePointsNoDuplicates(input) {\n    var point0 = quantizePoint(input[0]);\n    var output = [point0];\n    for (var i = 1; i < input.length; i++) {\n      var point = quantizePoint(input[i]);\n      if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {\n        output.push(point);\n        point0 = point;\n      }\n    }\n    if (output.length === 1 && input.length > 1) {\n      output.push(quantizePoint(input[input.length - 1]));\n    }\n    return output;\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizePointsNoDuplicates);\n  }\n\n  function quantizeGeometry(input) {\n    if (input == null) return input;\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n      case \"MultiPoint\": output = {type: input.type, coordinates: quantizePoints(input.coordinates)}; break;\n      case \"LineString\": output = {type: input.type, coordinates: quantizePointsNoDuplicates(input.coordinates)}; break;\n      case \"MultiLineString\": case \"Polygon\": output = {type: input.type, coordinates: quantizePolygon(input.coordinates)}; break;\n      case \"MultiPolygon\": output = {type: \"MultiPolygon\", coordinates: input.coordinates.map(quantizePolygon)}; break;\n      default: return input;\n    }\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  function quantizeFeature(input) {\n    var output = {type: \"Feature\", properties: input.properties, geometry: quantizeGeometry(input.geometry)};\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  if (input != null) switch (input.type) {\n    case \"Feature\": return quantizeFeature(input);\n    case \"FeatureCollection\": {\n      var output = {type: \"FeatureCollection\", features: input.features.map(quantizeFeature)};\n      if (input.bbox != null) output.bbox = input.bbox;\n      return output;\n    }\n    default: return quantizeGeometry(input);\n  }\n\n  return input;\n}\n", "import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, max, min, pi, radians, sign} from \"./math.js\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.593415793900743;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    sign(phi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var phi = y * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(y) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = sign(y) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n", "var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction nonempty(coordinates) {\n  return coordinates.length > 0;\n}\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1 ? [0, y] : [x0, quantize(y)]; // pole or antimeridian?\n}\n\nfunction clampPoint(p) {\n  var x = p[0], y = p[1], clamped = false;\n  if (x <= x0e) x = x0, clamped = true;\n  else if (x >= x1e) x = x1, clamped = true;\n  if (y <= y0e) y = y0, clamped = true;\n  else if (y >= y1e) y = y1, clamped = true;\n  return clamped ? [x, y] : p;\n}\n\nfunction clampPoints(points) {\n  return points.map(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(rings, polygon, fragments) {\n  for (var j = 0, m = rings.length; j < m; ++j) {\n    var ring = rings[j].slice();\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push({index: -1, polygon: polygon, ring: ring});\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        ring[i] = clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = {index: -1, polygon: polygon, ring: ring.slice(0, i + 1)};\n          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push({index: -1, polygon: polygon, ring: ring = ring.slice(k - 1)});\n        ring[0] = normalizePoint(ring[0][1]);\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n}\n\n// Now stitch the fragments back together into rings.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment.ring[0];\n    end = fragment.ring[fragment.ring.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment.ring);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment.ring[0];\n      end = fragment.ring[fragment.ring.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment.ring);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment.ring[0]];\n        startFragment.ring.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = {index: -1, polygon: startFragment.polygon, ring: startFragment.ring.concat(fragment.ring)};\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment.ring);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];\n        fragment.ring.pop(); // drop the shared coordinate\n        fragment = {index: n++, polygon: endFragment.polygon, ring: fragment.ring.concat(endFragment.ring)};\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n      } else {\n        fragment.ring.push(fragment.ring[0]); // close ring\n        fragment.polygon.push(fragment.ring);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(input) {\n  var output = {type: \"Feature\", geometry: stitchGeometry(input.geometry)};\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  if (input.properties != null) output.properties = input.properties;\n  return output;\n}\n\nfunction stitchGeometry(input) {\n  if (input == null) return input;\n  var output, fragments, i, n;\n  switch (input.type) {\n    case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(stitchGeometry)}; break;\n    case \"Point\": output = {type: \"Point\", coordinates: clampPoint(input.coordinates)}; break;\n    case \"MultiPoint\": case \"LineString\": output = {type: input.type, coordinates: clampPoints(input.coordinates)}; break;\n    case \"MultiLineString\": output = {type: \"MultiLineString\", coordinates: input.coordinates.map(clampPoints)}; break;\n    case \"Polygon\": {\n      var polygon = [];\n      extractFragments(input.coordinates, polygon, fragments = []);\n      stitchFragments(fragments);\n      output = {type: \"Polygon\", coordinates: polygon};\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = input.coordinates.length;\n      var polygons = new Array(n);\n      while (++i < n) extractFragments(input.coordinates[i], polygons[i] = [], fragments);\n      stitchFragments(fragments);\n      output = {type: \"MultiPolygon\", coordinates: polygons.filter(nonempty)};\n      break;\n    }\n    default: return input;\n  }\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nexport default function(input) {\n  if (input == null) return input;\n  switch (input.type) {\n    case \"Feature\": return stitchFeature(input);\n    case \"FeatureCollection\": {\n      var output = {type: \"FeatureCollection\", features: input.features.map(stitchFeature)};\n      if (input.bbox != null) output.bbox = input.bbox;\n      return output;\n    }\n    default: return stitchGeometry(input);\n  }\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math.js\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n", "import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math.js\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n", "import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n", "import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, min, pi, sign, sqrt} from \"./math.js\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  var sy = sign(y);\n  y = abs(y) / pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = y * (2 - (y > 0.5 ? min(y, abs(x)) : 0)),\n      r = x * x + y * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta * r * r > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    sy * halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n", "import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan} from \"./math.js\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [\n      cx * c0 * c1 * sin(lambda),\n      cy * s * c1\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [\n      atan2(x * tan(c), cx * p) / n,\n      p && asin(y * sin(c) / (cy * m1 * p)) / m2\n    ];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3;\n\n  // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon);\n  // poleline must be <= 90; parallels may approximate but never equal 180\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon);\n  // 0 <= inflation <= 99.999\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon);\n  // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n  ratio = max(ratio, epsilon);\n\n  // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n  var vinflation = inflation/100 + 1;\n  // axial ratio e.g. from 200 to 2:\n  var vratio  = ratio / 100;\n  // the other ones are a bit more complicated...\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\n\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function(_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n  projection.inflation = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection\n    .scale(163.775);\n}\n\nexport function wagner7() {\n  return wagner()\n      .poleline(65)\n      .parallels(60)\n      .inflation(0)\n      .ratio(200)\n      .scale(172.633);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n", "import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff.js\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math.js\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n"],
  "mappings": "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",
  "names": ["k", "x1", "y1", "phi0", "k", "A", "k", "phi0", "y0", "lobes", "k", "A", "epsilon", "phi0", "A", "B", "k", "phi0", "phi0", "x1", "y1", "points", "i", "a", "phi0", "phi0", "phi0", "k", "k", "A", "k", "k", "k", "A", "k", "projection", "k", "epsilon", "x0", "y0", "k", "x1", "k", "K", "phi0", "K", "epsilon", "p", "phi0", "y0", "y1", "k", "w", "K", "A", "B", "K2", "k", "projection", "k", "lobes", "phi0", "inverse", "sphere", "sign", "p", "x0", "x1", "y0", "y1", "boggs_default", "lobes", "homolosine_default", "lobes", "mollweide_default", "lobes", "lobes", "sinuMollweide_default", "lobes", "sinusoidal_default", "y0", "x0", "y0", "phi0", "k", "w", "k", "A", "k", "lobes", "k", "angle", "k", "pointEqual", "collignon_default", "face", "cartesian", "pi", "projection", "o", "x0", "y0", "x1", "y1", "gringorten_default", "input", "output", "phi0", "A", "k", "K", "k", "k", "A", "distance", "epsilon", "points", "k", "A", "A2", "A", "A2", "x1", "B", "A", "y1", "phi0", "B", "B2", "x1", "k", "projection", "w", "k"]
}
